name: Build FreeCAD AppImage
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: '0 1 * * *' # every Day at 01:00
permissions:
  actions: write
  contents: write
defaults:
  run:
    shell: bash
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  linux:
    runs-on: ubuntu-latest
    #timeout-minutes: 180
    steps:
    - name: Setup Env
      run: |
        #set -x
        #set -v
        ORIG_REPO="FreeCAD/FreeCAD"
        THIS_REPO_DIR=${GITHUB_WORKSPACE}
        TOOLS_DIR=${THIS_REPO_DIR}/.github/tools
        APPIMAGETOOL="${TOOLS_DIR}/appimagetool-x86_64.AppImage"

        for i in LINK_REPO THIS_REPO_DIR TOOLS_DIR APPIMAGETOOL; do
          eval "r=\"\$$i\""
          echo "$i=$r" >> $GITHUB_ENV
        done

    - name: Check Releases and Skip Rest of Job if no new release
      id: Check_Releases
      run: |
        #set -x
        #set -v
        GetReleases()
         {
          # gh release list:
          # createdAt, isDraft, isLatest, isPrerelease, name, publishedAt, tagName
          list=$(gh release list -R "$1" --json tagName | jq -r 'reverse | map(select(true))[] | (.tagName)')
          tmpfile=mktemp
          touch $tmpfile
          WRITE_IT=0
          for i in $list; do
            #echo $i
            if [ $WRITE_IT -eq 0 ] && [ "$i" = "1.0.1" ]; then
              WRITE_IT=1
            fi
            if [ $WRITE_IT -eq 1 ]; then
              echo $i >>$tmpfile
            fi
          done
          sort <$tmpfile >$2
          rm -f $tmpfile
         }
       
        GetReleases "$ORIG_REPO" "./Orig.Releases"
        GetReleases "$GITHUB_REPOSITORY" "./This.Releases"
        VERSION=$(head -1 <<< "$(comm -23 Orig.Releases This.Releases)")
        rm -f "./Orig.Releases" "./This.Releases"
        
        if [ -z "${VERSION}" ]; then
          echo "No new release found. Skipping rest of workflow."
          echo "skip=true" >> $GITHUB_OUTPUT
         else
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "New release found: ${VERSION}"
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Clone this repository
      if: steps.Check_Releases.outputs.skip == 'false'
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}

    - name: Get FreeCAD AppImage
      if: steps.Check_Releases.outputs.skip == 'false'
      run: |
        #set -x
        #set -v
        
        if [[ ${VERSION} == weekly* ]]; then
          IN_FILE=FreeCAD_${VERSION}-Linux-x86_64-py311.AppImage
          OUT_FILE=FreeCAD-Orig-${VERSION}-GN-Linux-x86_64-py311.AppImage
         else
          IN_FILE=FreeCAD_${VERSION}-conda-Linux-x86_64-py311.AppImage
          OUT_FILE=FreeCAD-Orig-${VERSION}-GN-conda-Linux-x86_64-py311.AppImage
        fi

        wget -q https://github.com/FreeCAD/FreeCAD/releases/download/${VERSION}/${IN_FILE}
        chmod a+x ${IN_FILE}

        ./${IN_FILE} --appimage-extract >/dev/null
        cp ${TOOLS_DIR}/AppRun.Link squashfs-root/AppRun
        ARCH=x86_64 ${APPIMAGETOOL} squashfs-root/ ${OUT_FILE} >/dev/null
        rm ${IN_FILE}
        rm -rf squashfs-root
        
        # Upload to GitHub Releases
        list=$(gh release list -R "$GITHUB_REPOSITORY" --json tagName | jq -r 'map(select(true))[] | (.tagName)');
        for i in $list; do
          if [ "$i" = "${VERSION}" ]; then
            gh release delete $VERSION -y
          fi
        done
        gh release create $VERSION *.AppImage* --title "$VERSION"

